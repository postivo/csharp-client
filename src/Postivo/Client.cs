//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Postivo
{
    using Newtonsoft.Json;
    using Postivo.Hooks;
    using Postivo.Models.Components;
    using Postivo.Models.Errors;
    using Postivo.Utils;
    using Postivo.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    public interface IClient
    {
        public IAccounts Accounts { get; }
        public IAddressBook AddressBook { get; }
        public IShipments Shipments { get; }
        public IMetadata Metadata { get; }

        /// <summary>
        /// Common
        /// </summary>
        public ICommon Common { get; }
        public ISenders Senders { get; }
    }


    public class Client: IClient
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.41";
        private const string _sdkGenVersion = "2.723.11";
        private const string _openapiDocVersion = "1.0.1";
        public IAccounts Accounts { get; private set; }
        public IAddressBook AddressBook { get; private set; }
        public IShipments Shipments { get; private set; }
        public IMetadata Metadata { get; private set; }
        public ICommon Common { get; private set; }
        public ISenders Senders { get; private set; }

        public Client(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Accounts = new Accounts(SDKConfiguration);

            AddressBook = new AddressBook(SDKConfiguration);

            Shipments = new Shipments(SDKConfiguration);

            Metadata = new Metadata(SDKConfiguration);

            Common = new Common(SDKConfiguration);

            Senders = new Senders(SDKConfiguration);
        }

        public Client(string? bearer = null, Func<string>? bearerSource = null, SDKConfig.Server? server = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, IClientHttpClient? client = null, RetryConfig? retryConfig = null)
        {

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<Postivo.Models.Components.Security>? _securitySource = null;

            if(bearerSource != null)
            {
                _securitySource = () => new Postivo.Models.Components.Security() { Bearer = bearerSource() };
            }
            else if(bearer != null)
            {
                _securitySource = () => new Postivo.Models.Components.Security() { Bearer = bearer };
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerName = server,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            Accounts = new Accounts(SDKConfiguration);

            AddressBook = new AddressBook(SDKConfiguration);

            Shipments = new Shipments(SDKConfiguration);

            Metadata = new Metadata(SDKConfiguration);

            Common = new Common(SDKConfiguration);

            Senders = new Senders(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new ClientHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServer(SDKConfig.Server server)
            {
                _sdkConfig.ServerName = server;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithBearerSource(Func<string> bearerSource)
            {
                _sdkConfig.SecuritySource = () => new Postivo.Models.Components.Security() { Bearer = bearerSource() };
                return this;
            }

            public SDKBuilder WithBearer(string bearer)
            {
                _sdkConfig.SecuritySource = () => new Postivo.Models.Components.Security() { Bearer = bearer };
                return this;
            }

            public SDKBuilder WithClient(IClientHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public Client Build()
            {
              return new Client(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}