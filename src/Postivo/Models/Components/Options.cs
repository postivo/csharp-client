//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Postivo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Postivo.Models.Components;
    using Postivo.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class OptionsType
    {
        private OptionsType(string value) { Value = value; }

        public string Value { get; private set; }

        public static OptionsType ShipmentOptions { get { return new OptionsType("ShipmentOptions"); } }

        public static OptionsType Null { get { return new OptionsType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(OptionsType v) { return v.Value; }
        public static OptionsType FromString(string v) {
            switch(v) {
                case "ShipmentOptions": return ShipmentOptions;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OptionsType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OptionsType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Options.OptionsConverter))]
    public class Options
    {
        public Options(OptionsType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public ShipmentOptions? ShipmentOptions { get; set; }

        public OptionsType Type { get; set; }
        public static Options CreateShipmentOptions(ShipmentOptions shipmentOptions)
        {
            OptionsType typ = OptionsType.ShipmentOptions;

            Options res = new Options(typ);
            res.ShipmentOptions = shipmentOptions;
            return res;
        }

        public static Options CreateNull()
        {
            OptionsType typ = OptionsType.Null;
            return new Options(typ);
        }

        public class OptionsConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(Options);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    return null;
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Options(OptionsType.ShipmentOptions)
                    {
                        ShipmentOptions = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<ShipmentOptions>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(ShipmentOptions), new Options(OptionsType.ShipmentOptions), "ShipmentOptions"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    writer.WriteRawValue("null");
                    return;
                }

                Options res = (Options)value;
                if (OptionsType.FromString(res.Type).Equals(OptionsType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.ShipmentOptions != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ShipmentOptions));
                    return;
                }
            }

        }

    }
}