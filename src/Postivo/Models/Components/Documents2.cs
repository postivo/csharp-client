//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Postivo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Postivo.Models.Components;
    using Postivo.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class Documents2Type
    {
        private Documents2Type(string value) { Value = value; }

        public string Value { get; private set; }

        public static Documents2Type DocumentPdf { get { return new Documents2Type("DocumentPdf"); } }

        public static Documents2Type DocumentLibrary { get { return new Documents2Type("DocumentLibrary"); } }

        public static Documents2Type DocumentMock { get { return new Documents2Type("DocumentMock"); } }

        public static Documents2Type ArrayOfDocuments1 { get { return new Documents2Type("arrayOfDocuments1"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(Documents2Type v) { return v.Value; }
        public static Documents2Type FromString(string v) {
            switch(v) {
                case "DocumentPdf": return DocumentPdf;
                case "DocumentLibrary": return DocumentLibrary;
                case "DocumentMock": return DocumentMock;
                case "arrayOfDocuments1": return ArrayOfDocuments1;
                default: throw new ArgumentException("Invalid value for Documents2Type");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((Documents2Type)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Document payload to print and enclose. For a single document, provide `DocumentPdf` or `DocumentLibrary`. For multiple documents, provide an array of `DocumentPdf`, `DocumentLibrary`, or `DocumentMock` objects (1â€“20).
    /// </summary>
    [JsonConverter(typeof(Documents2.Documents2Converter))]
    public class Documents2
    {
        public Documents2(Documents2Type type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public DocumentPdf? DocumentPdf { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DocumentLibrary? DocumentLibrary { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public DocumentMock? DocumentMock { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<Documents1>? ArrayOfDocuments1 { get; set; }

        public Documents2Type Type { get; set; }
        public static Documents2 CreateDocumentPdf(DocumentPdf documentPdf)
        {
            Documents2Type typ = Documents2Type.DocumentPdf;

            Documents2 res = new Documents2(typ);
            res.DocumentPdf = documentPdf;
            return res;
        }
        public static Documents2 CreateDocumentLibrary(DocumentLibrary documentLibrary)
        {
            Documents2Type typ = Documents2Type.DocumentLibrary;

            Documents2 res = new Documents2(typ);
            res.DocumentLibrary = documentLibrary;
            return res;
        }
        public static Documents2 CreateDocumentMock(DocumentMock documentMock)
        {
            Documents2Type typ = Documents2Type.DocumentMock;

            Documents2 res = new Documents2(typ);
            res.DocumentMock = documentMock;
            return res;
        }
        public static Documents2 CreateArrayOfDocuments1(List<Documents1> arrayOfDocuments1)
        {
            Documents2Type typ = Documents2Type.ArrayOfDocuments1;

            Documents2 res = new Documents2(typ);
            res.ArrayOfDocuments1 = arrayOfDocuments1;
            return res;
        }

        public class Documents2Converter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(Documents2);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Documents2(Documents2Type.DocumentLibrary)
                    {
                        DocumentLibrary = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DocumentLibrary>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DocumentLibrary), new Documents2(Documents2Type.DocumentLibrary), "DocumentLibrary"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Documents2(Documents2Type.DocumentMock)
                    {
                        DocumentMock = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DocumentMock>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DocumentMock), new Documents2(Documents2Type.DocumentMock), "DocumentMock"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Documents2(Documents2Type.DocumentPdf)
                    {
                        DocumentPdf = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<DocumentPdf>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(DocumentPdf), new Documents2(Documents2Type.DocumentPdf), "DocumentPdf"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Documents2(Documents2Type.ArrayOfDocuments1)
                    {
                        ArrayOfDocuments1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<Documents1>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<Documents1>), new Documents2(Documents2Type.ArrayOfDocuments1), "ArrayOfDocuments1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                Documents2 res = (Documents2)value;

                if (res.DocumentPdf != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DocumentPdf));
                    return;
                }

                if (res.DocumentLibrary != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DocumentLibrary));
                    return;
                }

                if (res.DocumentMock != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.DocumentMock));
                    return;
                }

                if (res.ArrayOfDocuments1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfDocuments1));
                    return;
                }
            }

        }

    }
}