//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Postivo.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using Postivo.Models.Components;
    using Postivo.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class ShipmentRecipientsType
    {
        private ShipmentRecipientsType(string value) { Value = value; }

        public string Value { get; private set; }

        public static ShipmentRecipientsType Recipients { get { return new ShipmentRecipientsType("Recipients"); } }

        public static ShipmentRecipientsType ArrayOfRecipients { get { return new ShipmentRecipientsType("arrayOfRecipients"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ShipmentRecipientsType v) { return v.Value; }
        public static ShipmentRecipientsType FromString(string v) {
            switch(v) {
                case "Recipients": return Recipients;
                case "arrayOfRecipients": return ArrayOfRecipients;
                default: throw new ArgumentException("Invalid value for ShipmentRecipientsType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ShipmentRecipientsType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Recipient data for a single shipment. For one recipient, provide a `RecipientInline`, `RecipientFromAddressBook`, or `RecipientFromAddressBookByExternalId` object. For multiple recipients, provide an array of these objects (1â€“50).
    /// </summary>
    [JsonConverter(typeof(ShipmentRecipients.ShipmentRecipientsConverter))]
    public class ShipmentRecipients
    {
        public ShipmentRecipients(ShipmentRecipientsType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Recipients? Recipients { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<Recipients>? ArrayOfRecipients { get; set; }

        public ShipmentRecipientsType Type { get; set; }
        public static ShipmentRecipients CreateRecipients(Recipients recipients)
        {
            ShipmentRecipientsType typ = ShipmentRecipientsType.Recipients;

            ShipmentRecipients res = new ShipmentRecipients(typ);
            res.Recipients = recipients;
            return res;
        }
        public static ShipmentRecipients CreateArrayOfRecipients(List<Recipients> arrayOfRecipients)
        {
            ShipmentRecipientsType typ = ShipmentRecipientsType.ArrayOfRecipients;

            ShipmentRecipients res = new ShipmentRecipients(typ);
            res.ArrayOfRecipients = arrayOfRecipients;
            return res;
        }

        public class ShipmentRecipientsConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(ShipmentRecipients);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new ShipmentRecipients(ShipmentRecipientsType.Recipients)
                    {
                        Recipients = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Recipients>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Recipients), new ShipmentRecipients(ShipmentRecipientsType.Recipients), "Recipients"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new ShipmentRecipients(ShipmentRecipientsType.ArrayOfRecipients)
                    {
                        ArrayOfRecipients = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<Recipients>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<Recipients>), new ShipmentRecipients(ShipmentRecipientsType.ArrayOfRecipients), "ArrayOfRecipients"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                ShipmentRecipients res = (ShipmentRecipients)value;

                if (res.Recipients != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Recipients));
                    return;
                }

                if (res.ArrayOfRecipients != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfRecipients));
                    return;
                }
            }

        }

    }
}