//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Postivo.Models.Errors
{
    using Newtonsoft.Json;
    using Postivo.Models.Components;
    using Postivo.Utils;
    using System;
    using System.Net.Http;

    public class ErrorResponsePayload
    {
        /// <summary>
        /// URI that identifies the problem type.
        /// </summary>
        [JsonProperty("type")]
        public string? Type { get; set; }

        /// <summary>
        /// HTTP status code generated by the origin server for this occurrence of the problem.
        /// </summary>
        [JsonProperty("status")]
        public long? Status { get; set; }

        /// <summary>
        /// Short, human-readable summary of the problem type.
        /// </summary>
        [JsonProperty("title")]
        public string? Title { get; set; }

        /// <summary>
        /// Human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        [JsonProperty("detail")]
        public string? Detail { get; set; }

        /// <summary>
        /// API-specific error code to help the provider team classify the error.
        /// </summary>
        [JsonProperty("code")]
        public string? Code { get; set; }

        /// <summary>
        /// URI that identifies this specific occurrence of the problem.
        /// </summary>
        [JsonProperty("instance")]
        public string? Instance { get; set; }

        [JsonProperty("-")]
        public HTTPMetadata HttpMeta { get; set; } = default!;
    }

    /// <summary>
    /// Problem Details object (RFC 9457) describing the error.
    /// </summary>
    public class ErrorResponse : ClientException
    {
        /// <summary>
        ///  The original data that was passed to this exception.
        /// </summary>
        public ErrorResponsePayload Payload { get; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.Type instead.")]
        public string? Type { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.Status instead.")]
        public long? Status { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.Title instead.")]
        public string? Title { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.Detail instead.")]
        public string? Detail { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.Code instead.")]
        public string? Code { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.Instance instead.")]
        public string? Instance { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorResponse.Payload.HttpMeta instead.")]
        public HTTPMetadata HttpMeta { get; set; } = default!;

        private static string ErrorMessage(ErrorResponsePayload payload, string body)
        {
            string? message = payload.Detail;
            if (!string.IsNullOrEmpty(message))
            {
                return message;
            }

            return "API error occurred";
        }

        public ErrorResponse(
            ErrorResponsePayload payload,
            HttpRequestMessage request,
            HttpResponseMessage response,
            string body
        ): base(ErrorMessage(payload, body), request, response, body)
        {
           Payload = payload;

           #pragma warning disable CS0618
           Type = payload.Type;
           Status = payload.Status;
           Title = payload.Title;
           Detail = payload.Detail;
           Code = payload.Code;
           Instance = payload.Instance;
           HttpMeta = payload.HttpMeta;
           #pragma warning restore CS0618
        }
    }

}