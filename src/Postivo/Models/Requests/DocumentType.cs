//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Postivo.Models.Requests
{
    using Newtonsoft.Json;
    using Postivo.Utils;
    using System;
    
    /// <summary>
    /// Type of document/certificate to generate.
    /// </summary>
    public enum DocumentType
    {
        /// <summary>
        /// Dispatch confirmation certificate
        /// </summary>
        [JsonProperty("dispatch_cert")]
        DispatchCert,
        /// <summary>
        /// Envelope template preview
        /// </summary>
        [JsonProperty("envelope")]
        Envelope,
        /// <summary>
        /// EPO certificate in PDF format (Elektroniczne Potwierdzenie Odbioru)
        /// </summary>
        [JsonProperty("epo_pdf")]
        EpoPdf,
        /// <summary>
        /// EPO certificate in XML format (Elektroniczne Potwierdzenie Odbioru)
        /// </summary>
        [JsonProperty("epo_xml")]
        EpoXml,
    }

    public static class DocumentTypeExtension
    {
        public static string Value(this DocumentType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static DocumentType ToEnum(this string value)
        {
            foreach(var field in typeof(DocumentType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is DocumentType)
                    {
                        return (DocumentType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum DocumentType");
        }
    }

}